package com.isbx.databinding.ui;

import android.content.Context;
import android.content.res.TypedArray;
import android.databinding.DataBindingUtil;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

import com.isbx.androidtools.ui.TextIconAdapter;

/**
 * An implementation of {@link TextIconAdapter} that uses the {@link DataBindingUtil} to inflate
 * the layout resource instead of the standard layout inflater. This allows you to use data binding
 * features such as binding adapters in your layout without having to write a new adapter class.
 */
public class BindingTextIconAdapter extends TextIconAdapter {
    private int resourceId;

    /**
     * Creates a new BindingTextIconAdapter instance. The layout found at {@code resource} will be
     * inflated for each {@link View} generated by this adapter. In each of these views, the
     * {@link android.widget.TextView} found with {@code textViewId} will be populated with the
     * appropriate text from the String array resource denoted by {@code labelArrayId}, and the
     * {@link ImageView} found with {@code imageViewId} will be populated with the appropriate image
     * resource id from the {@link TypedArray} resource denoted by {@code iconArrayId}.
     *
     * @param context The current {@link Context}
     * @param resource The resource ID for a layout file containing the layout to use when
     *                 instantiating views
     * @param textViewId The id of the {@link android.widget.TextView} within the layout resource to
     *                   be populated
     * @param imageViewId The id of the {@link ImageView} within the layout resource to be populated
     * @param labelArrayId The resource ID for a String array to use as labels for each view
     * @param iconArrayId The resource ID for a {@link TypedArray} of images to use as icons for
     *                    each view
     */
    public BindingTextIconAdapter(Context context, int resource, int textViewId, int imageViewId, int labelArrayId, int iconArrayId) {
        super(context, resource, textViewId, imageViewId, labelArrayId, iconArrayId);
        resourceId = resource;
    }

    /**
     * Creates a new BindingTextIconAdapter instance. The layout found at {@code resource} will be
     * inflated for each {@link View} generated by this adapter. In each of these views, the
     * {@link android.widget.TextView} found with {@code textViewId} will be populated with the
     * appropriate text from {@code labels}, and the {@link ImageView} found with
     * {@code imageViewId} will be populated with the appropriate image resource id from
     * {@code icons}.
     *
     * @param context The current {@link Context}
     * @param resource The resource ID for a layout file containing the layout to use when
     *                 instantiating views
     * @param textViewId The id of the {@link android.widget.TextView} within the layout resource to
     *                   be populated
     * @param imageViewId The id of the {@link ImageView} within the layout resource to be populated
     * @param labels An array of Strings to use as labels for each view
     * @param icons A {@link TypedArray} of image resource ids to use as icons for each view
     */
    public BindingTextIconAdapter(Context context, int resource, int textViewId, int imageViewId, String[] labels, TypedArray icons) {
        super(context, resource, textViewId, imageViewId, labels, icons);
        resourceId = resource;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        if (convertView == null) {
            convertView = DataBindingUtil.inflate(LayoutInflater.from(getContext()), resourceId, parent, false).getRoot();
        }
        return super.getView(position, convertView, parent);
    }
}
